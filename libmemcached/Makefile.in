# -*- mode: mak; indent-tabs-mode: t; tab-width: 8 -*-
# libmemcached makefile.
#
#
# Copyright (c) 2020 - 2022, Adam Young.
# All rights reserved.
#
# The applications are free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation, version 3.
#
# The applications are distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# ==end==
#

@SET_MAKE@
ROOT=		@abs_top_builddir@
top_builddir=	@top_builddir@

# File extensions

C=		.c
O=		.o
H=		.h
A=		.a
LP=		lib

CLEAN=		*.bak *~ *.BAK *.swp *.tmp core *.core a.out
XCLEAN=

# Compilers, programs

CC=		@CC@
AR=		@AR@
RANLIB= 	@RANLIB@
RM=		@RM@

# Configuration

ifeq ("$(BUILD_TYPE)","")	#default
BUILD_TYPE=	debug
MAKEFLAGS+=	BUILD_TYPE=debug
endif
ifneq ("$(BUILD_TYPE)","release")
RTSUFFIX=d
endif

# Directories

D_INC=		$(ROOT)/include
D_BIN=		$(ROOT)/bin@TOOLCHAINEXT@/$(BUILD_TYPE)
D_OBJ=		$(ROOT)/objects@TOOLCHAINEXT@/$(BUILD_TYPE)/libmemcached
D_LIB=		$(ROOT)/lib@TOOLCHAINEXT@/$(BUILD_TYPE)

# Common flags

XFLAGS=
CFLAGS=		@CFLAGS@
CWARN=		@CWARN@
ifeq (gcc,$(findstring gcc,$(CC)))
CWARN+=		-Wno-old-style-declaration
CWARN+=		-Wno-unused-variable -Wno-unused-parameter -Wno-unused-but-set-parameter -Wno-shadow
CWARN+= 	-Wno-implicit-fallthrough -Wno-empty-body
CWARN+=		-Wno-sign-compare
endif
CDEBUG=		@CDEBUG@
CRELEASE=	@CRELEASE@
LDDEBUG=	@LDDEBUG@
LDRELEASE=	@LDRELEASE@

CINCLUDE=	-I. -I$(D_INC) @CINCLUDE@

CEXTRA=		-DWIN32PORT @DEFS@ -DWIN32_SOCKET_MAP_NATIVE -DLIBW32_DYNAMIC

ifeq ("$(BUILD_TYPE)","release")
CFLAGS+=	$(CRELEASE) $(CWARN) $(CINCLUDE) $(CEXTRA) $(XFLAGS)
LDFLAGS=	$(LDRELEASE) @LDFLAGS@
else
CFLAGS+=	$(CDEBUG) $(CWARN) $(CINCLUDE) $(CEXTRA) $(XFLAGS)
LDFLAGS=	$(LDDEBUG) @LDFLAGS@
endif
LDLIBS=		-L$(D_LIB) @LIBS@ @EXTRALIBS@

ARFLAGS=	rcv
RMFLAGS=	-f
RMDFLAGS=	-rf


#########################################################################################
# Targets

#VERSION=	1.6.6
#VPATH=		memcached-1.6.6
VERSION=	1.6.15
VPATH=		memcached-1.6.15

LIBROOT=	memcached

#	daemon.c \
#	solaris_priv.c \ 
#	linux_priv.c \
#	openbsd_priv.c \
#	freebsd_priv.c \
#	sasl_defs.c \
#	tls.c

LIBCSOURCES=\
	memcached.c \
	hash.c \ 
	jenkins_hash.c \
	murmur3_hash.c \
	slabs.c \
	items.c \
	assoc.c \
	thread.c \
	stats_prefix.c \
	util.c \ 
	cache.c \
	bipbuffer.c \
	logger.c \
	crawler.c \
	itoa_ljust.c \
	slab_automove.c \ 
	authfile.c \
	restart.c \
	extstore.c \
	crc32c.c \
	storage.c \
	slab_automove_extstore.c

ifeq ("$(VERSION)","1.6.15")
LIBCSOURCES+=\
	base64.c\
	proto_bin.c\
	proto_text.c
endif

LIBHSOURCES=\
	memcached.h \
	hash.h \
	jenkins_hash.h \
	murmur3_hash.h \
	slabs.h \
	items.h \
	assoc.h \
	stats_prefix.h \
	util.h trace.h \
	cache.h sasl_defs.h \
	bipbuffer.h \
	logger.h \
	crawler.h \
	itoa_ljust.h \
	slab_automove.h \
	authfile.h \
	restart.h \
	extstore.h \
	crc32c.h \
	storage.h \
	slab_automove_extstore.h \
	tls.h

LIBOBJS=	$(addprefix $(D_OBJ)/,$(subst .c,$(O),$(LIBCSOURCES)))

LIBRARY=	$(D_LIB)/$(LP)$(LIBROOT)$(A)


#########################################################################################
# Rules

.PHONY:			build release debug
build:			directories memcached_package.h $(LIBRARY) installinc

release:
		$(MAKE) BUILD_TYPE=release $(filter-out release, $(MAKECMDGOALS))
debug:
		$(MAKE) BUILD_TYPE=debug $(filter-out debug, $(MAKECMDGOALS))

$(LIBRARY):		$(LIBOBJS)
		$(RM) $(RMFLAGS) $@
		$(AR) $(ARFLAGS) $@ $(LIBOBJS)
		$(RANLIB) $@

.PHONY:		installinc
installinc:		../include/.created
		@echo publishing headers ...

memcached_package.h:	Makefile
		$(PERL) ./package.pl --name "memcached" --version "$(VERSION)"

directories:	$(D_OBJ)/.created

%/.created:
		-@mkdir $(@D)
		@echo "do not delete, make managed content" > $@

clean:
		@echo $(BUILD_TYPE) clean
		-@$(RM) $(RMFLAGS) $(BAK) $(LIBRARY) $(LIBOBJS) $(CLEAN) $(XCLEAN) >/dev/null 2>&1
		-@$(RM) $(RMFLAGS) ../include/a_out.h >/dev/null 2>&1

$(D_OBJ)/%$(O): 	%$(C)
		$(CC) $(CFLAGS) -o $@ -c $<

#end

