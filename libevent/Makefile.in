# -*- mode: mak; indent-tabs-mode: t; tab-width: 8 -*-
# libevent makefile.
#
#
# Copyright (c) 2020 - 2022, Adam Young.
# All rights reserved.
#
# The applications are free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the License,
# or (at your option) any later version.
#
# Redistributions of source code must retain the above copyright
# notice, and must be distributed with the license document above.
#
# Redistributions in binary form must reproduce the above copyright
# notice, and must include the license document above in
# the documentation and/or other materials provided with the
# distribution.
#
# The applications are distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# ==end==
#

@SET_MAKE@
ROOT=		@abs_top_builddir@
top_builddir=	@top_builddir@

# File extensions

C=		.c
O=		.o
H=		.h
A=		.a
LP=		lib

CLEAN=		*.bak *~ *.BAK *.swp *.tmp core *.core a.out
XCLEAN=

# Compilers, programs

CC=		@CC@
AR=		@AR@
RANLIB= 	@RANLIB@
RM=		@RM@

# Configuration

ifeq ("$(BUILD_TYPE)","")	#default
BUILD_TYPE=	debug
MAKEFLAGS+=	BUILD_TYPE=debug
endif
ifneq ("$(BUILD_TYPE)","release")
RTSUFFIX=d
endif

# Directories

D_INC=		$(ROOT)/include
D_BIN=		$(ROOT)/bin@TOOLCHAINEXT@/$(BUILD_TYPE)
D_OBJ=		$(ROOT)/objects@TOOLCHAINEXT@/$(BUILD_TYPE)/libevent
D_LIB=		$(ROOT)/lib@TOOLCHAINEXT@/$(BUILD_TYPE)

VERSION=	2.1.12
VERSIONSPEC=	$(subst .,:,$(VERSION))
PACKED=		libevent-$(VERSION)-stable.tgz
SRCDIR=		./libevent-$(VERSION)-stable

# Common flags

XFLAGS=
CFLAGS=		@CFLAGS@
CWARN=		@CWARN@
CDEBUG=		@CDEBUG@
CRELEASE=	@CRELEASE@
LDDEBUG=	@LDDEBUG@
LDRELEASE=	@LDRELEASE@

CINCLUDE+=	-I. -I$(SRCDIR)/include -I$(D_INC) @CINCLUDE@

CEXTRA=		@DEFS@

ifeq ("$(BUILD_TYPE)","release")
CFLAGS+=	$(CRELEASE) $(CWARN) $(CINCLUDE) $(CEXTRA) $(XFLAGS)
LDFLAGS=	$(LDRELEASE) @LDFLAGS@
else
CEXTRA+=	-DUSE_DEBUG=1
CFLAGS+=	$(CDEBUG) $(CWARN) $(CINCLUDE) $(CEXTRA) $(XFLAGS)
LDFLAGS=	$(LDDEBUG) @LDFLAGS@
endif
LDLIBS=		-L$(D_LIB) @LIBS@ @EXTRALIBS@

ARFLAGS=	rcv
RMFLAGS=	-f
RMDFLAGS=	-rf


#########################################################################################
# Targets

LIBROOT=	event

VPATH=		$(SRCDIR)

#		arc4random.c		\
#		bufferevent_openssl.c	\
#		epoll_sub.c		\
#		evthread_pthread.c	\
#

LIBCSOURCES=\
		buffer.c		\
		bufferevent.c		\
		bufferevent_async.c	\
		bufferevent_filter.c	\
		bufferevent_pair.c	\
		bufferevent_ratelim.c	\
		bufferevent_sock.c	\
		buffer_iocp.c		\
		devpoll.c		\
		epoll.c			\
		evdns.c			\
		event.c			\
		event_iocp.c		\
		event_tagging.c		\
		evmap.c			\
		evport.c		\
		evrpc.c			\
		evthread.c		\
		evthread_win32.c	\
		evutil.c		\
		evutil_rand.c		\
		evutil_time.c		\
		http.c			\
		kqueue.c		\
		listener.c		\
		log.c			\
		poll.c			\
		select.c		\
		signal.c		\
		strlcpy.c		\
		win32select.c

LIBOBJS=	$(addprefix $(D_OBJ)/,$(subst .c,$(O),$(LIBCSOURCES)))

LIBRARY=	$(D_LIB)/$(LP)$(LIBROOT)$(A)

INSTALLED=


#########################################################################################
# Rules

.PHONY:			build release debug
build:			source unpacked
unpacked:		directories $(LIBRARY) installinc

release:
		$(MAKE) BUILD_TYPE=release $(filter-out release, $(MAKECMDGOALS))
debug:
		$(MAKE) BUILD_TYPE=debug $(filter-out debug, $(MAKECMDGOALS))

$(LIBRARY):		$(LIBOBJS)
		$(RM) $(RMFLAGS) $@
		$(AR) $(ARFLAGS) $@ $(LIBOBJS)
		$(RANLIB) $@

source:			.unpacked.$(VERSION)
		$(MAKE) unpacked

.unpacked.$(VERSION):	$(PACKED)
		@echo "unpacking source $(PACKED)"
		@gzip -c -d $(PACKED) | tar -xvf -
		@echo "do not delete, managed file" > $@

.PHONY:		installinc
installinc:		.headers.$(VERSION)
.headers.$(VERSION):
		@echo publishing headers ...
		@cp -f $(wildcard $(SRCDIR)/include/*.h) ../include
		@cp -f $(wildcard $(SRCDIR)/include/event2/*.h) ../include/event2
		@cp -f $(wildcard event2/*.h) ../include/event2
		@echo "do not delete, managed file" > $@

directories:	$(D_OBJ)/.created ../include/.created ../include/event2/.created

%/.created:
		-@mkdir $(@D)
		@echo "do not delete, make managed content" > $@

clean:
		@echo $(BUILD_TYPE) clean
		-@$(RM) $(RMFLAGS) $(BAK) $(INSTALLED) $(LIBRARY) $(LIBOBJS) $(CLEAN) $(XCLEAN) >/dev/null 2>&1
		-@$(RM) $(RMFLAGS) ../include/a_out.h >/dev/null 2>&1

$(D_OBJ)/%$(O):		%$(C)
		$(CC) $(CFLAGS) -o $@ -c $<

#end
