# -*- mode: mak; indent-tabs-mode: t; tab-width: 8 -*-
# liblua 5.4.x makefile.
#
#
# Copyright (c) 2022 - 2025, Adam Young.
# All rights reserved.
#
# The applications are free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the License,
# or (at your option) any later version.
#
# Redistributions of source code must retain the above copyright
# notice, and must be distributed with the license document above.
#
# Redistributions in binary form must reproduce the above copyright
# notice, and must include the license document above in
# the documentation and/or other materials provided with the
# distribution.
#
# The applications are distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# ==end==
#

@SET_MAKE@
ROOT=		@abs_top_builddir@
top_builddir=	@top_builddir@

# File extensions

C=		.c
O=		.o
E=
H=		.h
A=		.a
LP=		lib

CLEAN=		*.bak *~ *.BAK *.swp *.tmp core *.core a.out
XCLEAN=

# Compilers, programs

CC=		@CC@
AR=		@AR@
RANLIB= 	@RANLIB@
RM=		@RM@
PERL=		@PERL@
LIBTOOL=	@LIBTOOL@
RC=		@RC@

# Configuration

ifeq ("$(BUILD_TYPE)","")	#default
BUILD_TYPE=	debug
MAKEFLAGS+=	BUILD_TYPE=debug
endif
ifneq ("$(BUILD_TYPE)","release")
RTSUFFIX=d
endif

QUIETOUT:=	>/dev/null 2>&1
ifeq ($(VERBOSE),1)
QUIETOUT:=
else ifeq ($(VERBOSE),0)
else ifeq ($(VERBOSE),)
else
$(error VERBOSE: unexpected value 0 or 1 required, $(VERBOSE) given]))
endif

# Directories

D_INC=		$(ROOT)/include
D_BIN=		$(ROOT)/bin@TOOLCHAINEXT@/$(BUILD_TYPE)
D_OBJ=		$(ROOT)/objects@TOOLCHAINEXT@/$(BUILD_TYPE)/liblua
D_LIB=		$(ROOT)/lib@TOOLCHAINEXT@/$(BUILD_TYPE)

#VERSION=	5.4.4
VERSION=	5.4.7
LIBROOT=	lua
VERSIONSPEC=	$(subst .,:,$(VERSION))
PACKED=		lua-$(VERSION).tar.gz
SRCDIR=		./lua-$(VERSION)/src

# Common flags

XFLAGS=
CFLAGS=		@CFLAGS@
CWARN=		@CWARN@
CDEBUG=		@CDEBUG@
CRELEASE=	@CRELEASE@
LDDEBUG=	@LDDEBUG@
LDRELEASE=	@LDRELEASE@

CINCLUDE+=	-I. -I$(SRCDIR)/include -I$(D_INC) @CINCLUDE@

CEXTRA=		@DEFS@ -DLUA_COMPAT_5_3

ifeq ("$(BUILD_TYPE)","release")
CFLAGS+=	$(CRELEASE) $(CWARN) $(CINCLUDE) $(CEXTRA) $(XFLAGS)
LDFLAGS=	$(LDRELEASE) @LDFLAGS@
else
CEXTRA+=	-DUSE_DEBUG=1
CFLAGS+=	$(CDEBUG) $(CWARN) $(CINCLUDE) $(CEXTRA) $(XFLAGS)
LDFLAGS=	$(LDDEBUG) @LDFLAGS@
endif
LDLIBS=		-L$(D_LIB) $(LINKLIBS) @LIBS@ @EXTRALIBS@

ARFLAGS=	rcv
RMFLAGS=	-f
RMDFLAGS=	-rf


#########################################################################################
# Targets

VPATH=		. $(SRCDIR)

LIBCSOURCES=\
		lauxlib.c		\
		lbaselib.c		\
		lcorolib.c		\
		ldblib.c		\
		liolib.c		\
		lmathlib.c		\
		loadlib.c		\
		loslib.c		\
		lstrlib.c		\
		ltablib.c		\
		lutf8lib.c		\
		linit.c

CORECSOURCES=\
		lapi.c			\
		lcode.c			\
		lctype.c		\
		ldebug.c		\
		ldo.c			\
		ldump.c			\
		lfunc.c			\
		lgc.c			\
		llex.c			\
		lmem.c			\
		lobject.c		\
		lopcodes.c		\
		lparser.c		\
		lstate.c		\
		lstring.c		\
		ltable.c		\
		ltm.c			\
		lundump.c		\
		lvm.c			\
		lzio.c

LIBOBJS=	$(addprefix $(D_OBJ)/,$(subst .c,$(O),$(LIBCSOURCES)))
LIBOBJS+=	$(addprefix $(D_OBJ)/,$(subst .c,$(O),$(CORECSOURCES)))
DLLOBJS=	$(subst $(O),.lo,$(LIBOBJS))

ifeq ("win32","@build_os@")
ifeq (mingw,$(findstring mingw,"@TOOLCHAIN@"))
DLLOBJS+=	$(D_OBJ)/liblua_res.o
else
DLLOBJS+=	$(D_OBJ)/liblua.res
endif
endif

LUALIB=		$(D_LIB)/$(LP)$(LIBROOT)_static$(A)
LUADLL=		$(D_LIB)/$(LP)$(LIBROOT).la

LIBRARIES=	$(LUALIB) $(LUADLL)

BINARIES=	\
	$(D_BIN)/lua$(E)		\
	$(D_BIN)/luac$(E)

INSTALLED=


#########################################################################################
# Rules

.PHONY:		build debug release
build:			source unpacked
unpacked:		directories version.h $(LIBRARIES) $(BINARIES) installinc

release:
		$(MAKE) BUILD_TYPE=release $(filter-out release, $(MAKECMDGOALS))
debug:
		$(MAKE) BUILD_TYPE=debug $(filter-out debug, $(MAKECMDGOALS))

$(LUALIB):		$(LIBOBJS)
		$(RM) $(RMFLAGS) $@
		$(AR) $(ARFLAGS) $@ $(LIBOBJS)
		$(RANLIB) $@

INSTALLED+=	$(D_BIN)/lib$(LIBROOT).dll
$(LUADLL):		CEXTRA += -DLUA_BUILD_AS_DLL
##$(LUADLL):		DLLDEF = -export-symbols liblua.def
$(LUADLL):		DLLDEF = -version-number $(VERSIONSPEC)
$(LUADLL):		$(DLLOBJS)
		$(LIBTOOL) --mode=link $(CC) $(LDFLAGS) -o $@ \
			-rpath $(D_LIB) -bindir $(D_BIN) $(DLLDEF) $^ $(LDLIBS)

source:			.unpacked.$(VERSION)
		$(MAKE) unpacked

.unpacked.$(VERSION):	$(PACKED)
		@echo "unpacking source $(PACKED)"
		@gzip -c -d $(PACKED) | tar -xvf -
		@echo "do not delete, managed file" > $@

$(D_BIN)/lua$(E):	MAPFILE=$(basename $@).map
$(D_BIN)/lua$(E):	LINKLIBS=-l$(LIBROOT)_static
$(D_BIN)/lua$(E):	$(D_OBJ)/lua$(O)
		$(LIBTOOL) --mode=link $(CC) $(LDFLAGS) $^ -o $@ $(LDLIBS) @LDMAPFILE@

$(D_BIN)/luac$(E):	MAPFILE=$(basename $@).map
$(D_BIN)/luac$(E):	LINKLIBS=-l$(LIBROOT)_static
$(D_BIN)/luac$(E):	$(D_OBJ)/luac$(O)
		$(LIBTOOL) --mode=link $(CC) $(LDFLAGS) $^ -o $@ $(LDLIBS) @LDMAPFILE@

.PHONY:		installinc
installinc:		.headers.$(VERSION)
.headers.$(VERSION):
		@echo publishing headers ...
		@cp -f $(SRCDIR)/lua.h ../include
		@cp -f $(SRCDIR)/luaconf.h ../include
		@cp -f $(SRCDIR)/lualib.h ../include
		@cp -f $(SRCDIR)/lauxlib.h ../include
		@echo "do not delete, managed file" > $@

directories:	$(D_OBJ)/.created ../include/.created

version.h:		Makefile version.pl
		@$(PERL) ./version.pl --name "lib$(LIBROOT)" --version "$(VERSION)"

%/.created:
		-@mkdir $(@D)
		@echo "do not delete, make managed content" > $@

clean:
		@echo $(BUILD_TYPE) clean
		-@$(LIBTOOL) --mode=clean $(RM) $(LUADLL) $(DLLOBJS) $(QUIETOUT)
		-@$(RM) $(RMFLAGS) $(BAK) $(INSTALLED) $(LUALIB) $(LIBOBJS) $(CLEAN) $(XCLEAN) $(QUIETOUT)
		-@$(RM) $(RMFLAGS) ../include/a_out.h $(QUIETOUT)

$(D_OBJ)/%$(O):		%$(C)
		$(CC) $(CFLAGS) -o $@ -c $<

$(D_OBJ)/%.lo:		%.c
		$(LIBTOOL) --mode=compile $(CC) $(CFLAGS) -o $@ -c $<

$(D_OBJ)/%.res:		%.rc
		$(RC) -fo $@ $<

$(D_OBJ)/%_res.o:	%.rc
		$(RC) -o $@ $<

#end

